// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-chat/server (interfaces: Connection)

// Package mock_service is a generated GoMock package.
package mock_service

import (
	server "github.com/go-chat/server"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	reflect "reflect"
)

// MockConnection is a mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// GetConn mocks base method
func (m *MockConnection) GetConn() *websocket.Conn {
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(*websocket.Conn)
	return ret0
}

// GetConn indicates an expected call of GetConn
func (mr *MockConnectionMockRecorder) GetConn() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockConnection)(nil).GetConn))
}

// Read mocks base method
func (m *MockConnection) Read() (*server.MessageJSON, error) {
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(*server.MessageJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockConnectionMockRecorder) Read() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConnection)(nil).Read))
}
